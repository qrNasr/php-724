Sure, let's focus on creating various types of functions in PHP that deal with mathematical operations. We'll cover basic arithmetic functions, more complex mathematical calculations, and even some statistical functions. Here's how you can implement these in PHP:

### Basic Arithmetic Functions

#### Addition

```php
<?php
function add($a, $b) {
    return $a + $b;
}

echo add(5, 10); // Output: 15
?>
```

#### Subtraction

```php
<?php
function subtract($a, $b) {
    return $a - $b;
}

echo subtract(15, 5); // Output: 10
?>
```

#### Multiplication

```php
<?php
function multiply($a, $b) {
    return $a * $b;
}

echo multiply(3, 4); // Output: 12
?>
```

#### Division

```php
<?php
function divide($a, $b) {
    if ($b == 0) {
        return "Division by zero error!";
    }
    return $a / $b;
}

echo divide(20, 4); // Output: 5
echo divide(20, 0); // Output: Division by zero error!
?>
```

### Advanced Mathematical Functions

#### Exponentiation

```php
<?php
function power($base, $exponent) {
    return pow($base, $exponent);
}

echo power(2, 3); // Output: 8
?>
```

#### Square Root

```php
<?php
function squareRoot($number) {
    return sqrt($number);
}

echo squareRoot(16); // Output: 4
?>
```

#### Absolute Value

```php
<?php
function absoluteValue($number) {
    return abs($number);
}

echo absoluteValue(-5); // Output: 5
?>
```

#### Trigonometric Functions

```php
<?php
function sine($angle) {
    return sin(deg2rad($angle));
}

function cosine($angle) {
    return cos(deg2rad($angle));
}

function tangent($angle) {
    return tan(deg2rad($angle));
}

echo sine(30); // Output: 0.5
echo cosine(60); // Output: 0.5
echo tangent(45); // Output: 1
?>
```

### Statistical Functions

#### Mean (Average)

```php
<?php
function mean($numbers) {
    return array_sum($numbers) / count($numbers);
}

echo mean([1, 2, 3, 4, 5]); // Output: 3
?>
```

#### Median

```php
<?php
function median($numbers) {
    sort($numbers);
    $count = count($numbers);
    $middle = floor($count / 2);

    if ($count % 2) {
        return $numbers[$middle];
    } else {
        return ($numbers[$middle - 1] + $numbers[$middle]) / 2.0;
    }
}

echo median([1, 3, 3, 6, 7, 8, 9]); // Output: 6
echo median([1, 2, 3, 4, 5, 6, 8, 9]); // Output: 4.5
?>
```

#### Mode

```php
<?php
function mode($numbers) {
    $values = array_count_values($numbers);
    $mode = array_search(max($values), $values);
    return $mode;
}

echo mode([1, 2, 2, 3, 4]); // Output: 2
?>
```

### Complex Mathematical Operations

#### Factorial (Recursive)

```php
<?php
function factorial($n) {
    if ($n == 0) {
        return 1;
    } else {
        return $n * factorial($n - 1);
    }
}

echo factorial(5); // Output: 120
?>
```

#### Fibonacci Sequence (Recursive)

```php
<?php
function fibonacci($n) {
    if ($n <= 1) {
        return $n;
    } else {
        return fibonacci($n - 1) + fibonacci($n - 2);
    }
}

echo fibonacci(10); // Output: 55
?>
```

### Example: Combining Mathematical Functions

Here's an example that uses multiple mathematical functions:

```php
<?php
function calculate($a, $b) {
    $addition = add($a, $b);
    $subtraction = subtract($a, $b);
    $multiplication = multiply($a, $b);
    $division = divide($a, $b);
    $power = power($a, $b);
    $sqrtA = squareRoot($a);
    $sqrtB = squareRoot($b);

    return [
        'addition' => $addition,
        'subtraction' => $subtraction,
        'multiplication' => $multiplication,
        'division' => $division,
        'power' => $power,
        'sqrtA' => $sqrtA,
        'sqrtB' => $sqrtB
    ];
}

$result = calculate(10, 2);
print_r($result);
/*
Output:
Array
(
    [addition] => 12
    [subtraction] => 8
    [multiplication] => 20
    [division] => 5
    [power] => 100
    [sqrtA] => 3.1622776601684
    [sqrtB] => 1.4142135623731
)
*/
?>
```

This example combines various mathematical operations into a single function that returns an array with all the results.

Feel free to ask if you have any specific questions or need further assistance!
